AWSTemplateFormatVersion: '2010-09-09'
Description: Provision AWS Lambda, API Gateway, and ElasticCache (Redis) resources

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
  AwsRuntime:
    Type: String
    Description: AWS Lambda Runtime

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 10.0.0.0/16

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  SubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.128.0/20
      VpcId: !Ref VPC

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteTableAssociationPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate
      RouteTableId: !Ref RouteTablePrivate

  RouteTablePublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref SubnetPublic

  RouteTablePrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for Lambda

  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Ingress for Redis Cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Cache Subnet Group
      SubnetIds:
        - !Ref SubnetPrivate

  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    DependsOn: ElastiCacheSubnetGroup
    Properties:
      CacheNodeType: cache.t2.micro
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup

  LambdaGetCurrentWeather:
    Type: AWS::Lambda::Function
    DependsOn: ElastiCacheCluster
    Properties:
      FunctionName: !Sub ${ProjectName}_get_current_weather
      Runtime: !Ref AwsRuntime
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref ProjectName
        S3Key: !Sub functions/${ProjectName}_get_current_weather.zip
      Timeout: 30
      Environment:
        Variables:
          SECRET_NAME: !Ref ProjectName
          REDIS_ENDPOINT: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt ElastiCacheCluster.RedisEndpoint.Port
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetPrivate

  LambdaIndex:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}_index
      Runtime: !Ref AwsRuntime
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref ProjectName
        S3Key: !Sub functions/${ProjectName}_index.zip
      Timeout: 30
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetPrivate

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RestApi

  ResourceV1:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: v1

  ResourceGetCurrentWeather:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ResourceV1
      PathPart: getCurrentWeather

  MethodGetCurrentWeather:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ResourceGetCurrentWeather
      RestApiId: !Ref RestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaGetCurrentWeather.Arn}/invocations

  RootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaIndex.Arn}/invocations

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSecretPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ProjectName}-*
        - PolicyName: LambdaVpcPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeSecurityGroups
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:CreateSubnet
                  - ec2:DescribeSubnets
                Resource: '*'

  LambdaGetCurrentWeatherPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaGetCurrentWeather.Arn
      Principal: apigateway.amazonaws.com

  LambdaIndexPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaIndex.Arn
      Principal: apigateway.amazonaws.com

  RestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref RestApiDeployment
      RestApiId: !Ref RestApi
      StageName: !Ref ProjectName

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MethodGetCurrentWeather
    Properties:
      RestApiId: !Ref RestApi
